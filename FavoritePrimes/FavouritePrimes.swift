
public enum FavouritePrimesAction {
    case deleteFavouritePrime(IndexSet)

    // generated by generate-enum-properties
    // allows keypath acces to enum properties
//    var deleteFavouritePrime: IndexSet? {
//        get {
//            guard case let .deleteFavouritePrime(value) = self else { return nil }
//            return value
//        }
//        set {
//            guard case .deleteFavouritePrime = self, let newValue = newValue else { return }
//            self = .deleteFavouritePrime(newValue)
//        }
//    }
}

// pass only the parts of the AppState we care about (favouritePrimes and activityFeed)
public func favouritePrimesReducer(state: inout [Int], action: FavouritePrimesAction) -> Void {
    
    switch action {
    case .deleteFavouritePrime(let indexSet):
        for index in indexSet {
            let prime = state[index]
            state.removeAll(where: { $0 == prime })
        }
    }
}
