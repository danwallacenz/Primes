//
//  Actions.swift
//  Primes
//
//  Created by Daniel Wallace on 14/09/19.
//  Copyright Â© 2019 danwallacenz. All rights reserved.
//

import Foundation

// MARK:- Actions

enum CounterAction {
    case decrTapped
    case incrTapped
}

enum IsPrimeModalAction {
    case addFavouritePrimeTapped
    case removeFavouritePrimeTapped
}

enum FavouritePrimesAction {
    case deleteFavouritePrime(IndexSet)

    // generated by generate-enum-properties
    // allows keypath acces to enum properties
    var deleteFavouritePrime: IndexSet? {
        get {
            guard case let .deleteFavouritePrime(value) = self else { return nil }
            return value
        }
        set {
            guard case .deleteFavouritePrime = self, let newValue = newValue else { return }
            self = .deleteFavouritePrime(newValue)
        }
    }
}

enum AppAction {
    case counter(CounterAction)
    case isPrimeModal(IsPrimeModalAction)
    case favouritePrimes(FavouritePrimesAction)

    // generated by generate-enum-properties
    // allows keypath acces to enum properties
    var counter: CounterAction? {
        get {
            guard case let .counter(value) = self else { return nil }
            return value
        }
        set {
            guard case .counter = self, let newValue = newValue else { return }
            self = .counter(newValue)
        }
    }

    // generated by generate-enum-properties
    // allows keypath acces to enum properties
    var isPrimeModal: IsPrimeModalAction? {
        get {
            guard case let .isPrimeModal(value) = self else { return nil }
            return value
        }
        set {
            guard case .isPrimeModal = self, let newValue = newValue else { return }
            self = .isPrimeModal(newValue)
        }
    }

    // generated by generate-enum-properties
    // allows keypath acces to enum properties
    var favouritePrimes: FavouritePrimesAction? {
        get {
            guard case let .favouritePrimes(value) = self else { return nil }
            return value
        }
        set {
            guard case .favouritePrimes = self, let newValue = newValue else { return }
            self = .favouritePrimes(newValue)
        }
    }
}

